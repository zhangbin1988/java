<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd"
       default-lazy-init="true">

    <bean id="poolDataSource" abstract="true">
        <property name="maxActive" value="${jdbc.pool.maxActive}"/> <!-- 池中工作连接的最大个数，此值为非正数是表述不限制。 -->
        <property name="maxIdle" value="${jdbc.pool.maxIdle}"/><!--池中允许的最大连接数处于待命状态而不被清除，值为非正数时表示不限制。-->
        <property name="minIdle" value="${jdbc.pool.minIdle}"/><!-- 最小等待连接中的数量,设 0 为没有限制 -->
        <property name="defaultAutoCommit" value="${jdbc.pool.defaultAutoCommit}"/>
        <property name="initialSize" value="10"/>  <!-- 初始化连接数量 -->
        <property name="maxWait" value="10000"/>  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->
        <property name="removeAbandonedTimeout" value="60"/>  <!--自我中断时间秒 -->
        <property name="minEvictableIdleTimeMillis" value="30000"/>  <!--连接的超时时间，默认为半小时。-->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>  <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="jmxEnabled" value="true"/>  <!-- 注册池JMX。的默认值是true。-->
        <property name="testWhileIdle" value="false"/>  <!--默认值是false,当连接池中的空闲连接是否有效 -->
        <property name="testOnBorrow" value="true"/> <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效-->
        <property name="validationInterval" value="30000"/>  <!--检查连接死活的时间间隔（单位：毫妙） 0以下的话不检查。默认是0。 -->
        <property name="testOnReturn" value="false"/>  <!--默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
        <property name="validationQuery" value="select 1"/>  <!--一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql-->
        <property name="logAbandoned" value="true"/>  <!--是否记录中断事件， 默认为 false-->
        <property name="removeAbandoned" value="true"/>  <!-- 是否自动回收超时连接-->
        <!--这些拦截器将被插入到链中的一个java.sql.Connection对象的操作都是以拦截器。默认值是空的。
              预定义的拦截器：
              org.apache.tomcat.jdbc.pool.interceptor.ConnectionState - 跟踪自动提交，只读目录和事务隔离级别。
              org.apache.tomcat.jdbc.pool.interceptor.tatementFinalizer - 跟踪打开的语句，并关闭连接时返回到池中。
        <property name="jdbcInterceptors" value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"/>-->
    </bean>

    <!-- mybatis 分页插件 -->
    <bean id="pageHelperPlugin" class="com.github.pagehelper.PageHelper">
        <property name="properties">
            <props>
                <!-- 4.0.0以后版本可以不设置该参数 -->
                <prop key="dialect">mysql</prop>
                <!-- 该参数默认为false -->
                <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
                <!-- 和startPage中的pageNum效果一样-->
                <prop key="offsetAsPageNum">true</prop>
                <!-- 该参数默认为false -->
                <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
                <prop key="rowBoundsWithCount">true</prop>
                <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
                <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
                <prop key="pageSizeZero">true</prop>
                <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
                <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
                <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
                <prop key="reasonable">false</prop>
                <!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
                <!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
                <!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
                <!-- 不理解该含义的前提下，不要随便复制该配置 -->
                <!--<prop key="params">pageNum=start;pageSize=limit;</prop>-->
                <!-- 支持通过Mapper接口参数来传递分页参数 -->
                <prop key="supportMethodsArguments">true</prop>
                <!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
                <prop key="returnPageInfo">check</prop>
            </props>
        </property>
    </bean>

    <!-- admin DB Config -->
    <bean id="sqlSessionFactory" name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:mybatis/*.xml</value>

            </array>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.zn.filter.CustomDataLogInterceptor">
                </bean>
                <ref bean="pageHelperPlugin"/>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zn."/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close" parent="poolDataSource">
        <property name="driverClassName" value="${admin.jdbc.driver}"/>
        <property name="url" value="${admin.jdbc.url}"/>
        <property name="username" value="${admin.jdbc.username}"/>
        <property name="password" value="${admin.jdbc.password}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>
